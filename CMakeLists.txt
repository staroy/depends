cmake_minimum_required(VERSION 3.10)
project(external)

include(ExternalProject)

set(BOOST_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/boost_1_68_0)
string(TOLOWER "${CMAKE_BUILD_TYPE}" BOOST_BUILD_TYPE)

if("release" STREQUAL ${BOOST_BUILD_TYPE})
    set(BOOST_LINK "static")
else()
    set(BOOST_LINK "shared")
endif()

if(WIN32)
 set(BOOST_CXXFLAGS -std=c++11\ -DBOOST_THREAD_USES_CHRONO)
else()
 #if("release" STREQUAL ${BOOST_BUILD_TYPE})
  set(BOOST_CXXFLAGS -fPIC\ -std=c++11\ -DBOOST_THREAD_USES_CHRONO\ -DBOOST_ERROR_CODE_HEADER_ONLY)
 #else()
  #set(BOOST_CXXFLAGS -fPIC\ -std=c++11\ -DBOOST_THREAD_USES_CHRONO\ -DBOOST_ERROR_CODE_HEADER_ONLY)
 #endif()
endif()

ExternalProject_Add(boost_prj
 CONFIGURE_COMMAND cd ${BOOST_ROOT} && ./bootstrap.sh --prefix=${CMAKE_INSTALL_PREFIX} --with-python=no
 BUILD_COMMAND cd ${BOOST_ROOT} && ./b2 ${CMAKE_N_BUILDPROC} link=${BOOST_LINK} variant=${BOOST_BUILD_TYPE} cxxflags=${BOOST_CXXFLAGS} threading=multi install --without-python
 INSTALL_COMMAND ""
 SOURCE_DIR ${BOOST_ROOT}
 BINARY_DIR ${BOOST_ROOT}
)

set(RAPIDJSON_DIR ${CMAKE_CURRENT_SOURCE_DIR}/rapidjson-1.1.0)
set(RAPIDJSON_BUILD_DIR ${CMAKE_BINARY_DIR}/rapidjson-1.1.0)

if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 7.5)
    set(RAPIDJSON_CXX_FLAGS -Wno-error=stringop-overflow\ -Wno-error=implicit-fallthrough\ -Wno-error=class-memaccess\ -I${CMAKE_INSTALL_PREFIX}/include)
else()
    set(RAPIDJSON_CXX_FLAGS -I${CMAKE_INSTALL_PREFIX}/include)
endif()

ExternalProject_Add(rapidjson_prj
  CONFIGURE_COMMAND mkdir -p ${RAPIDJSON_BUILD_DIR} && cd ${RAPIDJSON_BUILD_DIR} && cmake -DRAPIDJSON_BUILD_TESTS=OFF -DRAPIDJSON_BUILD_EXAMPLES=OFF -DCMAKE_CXX_FLAGS=${RAPIDJSON_CXX_FLAGS} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} ${RAPIDJSON_DIR}
  BUILD_COMMAND cd ${RAPIDJSON_BUILD_DIR} && make install
  INSTALL_COMMAND ""
  SOURCE_DIR ${RAPIDJSON_DIR}
  BINARY_DIR ${RAPIDJSON_DIR}
)

add_dependencies(rapidjson_prj boost_prj)

set(WEBSOCKETPP_DIR ${CMAKE_CURRENT_SOURCE_DIR}/websocketpp-0.8.2)
set(WEBSOCKETPP_BUILD_DIR ${CMAKE_BINARY_DIR}/websocketpp-0.8.2)

ExternalProject_Add(websocketpp_prj
  CONFIGURE_COMMAND mkdir -p ${WEBSOCKETPP_BUILD_DIR} && cd ${WEBSOCKETPP_BUILD_DIR} && cmake -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DCMAKE_CXX_FLAGS=-I${CMAKE_INSTALL_PREFIX}/include ${WEBSOCKETPP_DIR}
  BUILD_COMMAND cd ${WEBSOCKETPP_BUILD_DIR} && make ${CMAKE_N_BUILDPROC} install
  INSTALL_COMMAND ""
  SOURCE_DIR ${WEBSOCKETPP_DIR}
  BINARY_DIR ${WEBSOCKETPP_DIR}
)

add_dependencies(websocketpp_prj boost_prj)

set(LUA_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lua-5.4.2)
string(TOLOWER "${CMAKE_SYSTEM_NAME}" LUA_BUILD_PLATFORM)

if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
    set(LUA_OPT "-fPIC -O2 -g0")
else()
    set(LUA_OPT "-fPIC -O0 -g3")
endif()

set(LUA_BUILD_DIR ${CMAKE_BINARY_DIR}/lua-5.4.2)

ExternalProject_Add(lua_prj
  CONFIGURE_COMMAND cp -R ${LUA_DIR} ${CMAKE_BINARY_DIR}
  BUILD_COMMAND cd ${LUA_BUILD_DIR} && make ${LUA_BUILD_PLATFORM} MYCFLAGS=${LUA_OPT} ${CMAKE_N_BUILDPROC} INSTALL_TOP=${CMAKE_INSTALL_PREFIX} all && make INSTALL_TOP=${CMAKE_INSTALL_PREFIX} install
  INSTALL_COMMAND  ""
  SOURCE_DIR ${LUA_DIR}
  BINARY_DIR ${LUA_DIR}
)

set(SOL2_DIR ${CMAKE_CURRENT_SOURCE_DIR}/sol2-3.2.2)
set(SOL2_BUILD_DIR ${CMAKE_BINARY_DIR}/sol2-3.2.2)

# CONFIGURE_COMMAND mkdir -p ${SOL2_BUILD_DIR} && cd ${SOL2_BUILD_DIR} && cmake -DTESTS=OFF -DEXAMPLES=OFF -DLUA_VERSION=5.3 -DLUA_INCLUDE_DIR=${CMAKE_INSTALL_PREFIX}/include -DLUA_LIBRARY_DIR=${CMAKE_INSTALL_PREFIX}/lib -DLUA_LIBRARIES=lua -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} ${SOL2_DIR}

ExternalProject_Add(sol2_prj
  CONFIGURE_COMMAND mkdir -p ${SOL2_BUILD_DIR} && cd ${SOL2_BUILD_DIR} && cmake -DTESTS=OFF -DEXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} ${SOL2_DIR}
  BUILD_COMMAND cd ${SOL2_BUILD_DIR} && make all && mkdir -p ${CMAKE_INSTALL_PREFIX}/include/sol && cp ${SOL2_DIR}/single/include/sol/sol.hpp ${CMAKE_INSTALL_PREFIX}/include/sol/sol.hpp
  INSTALL_COMMAND ""
  SOURCE_DIR ${SOL2_DIR}
  BINARY_DIR ${SOL2_DIR}
)

add_dependencies(sol2_prj lua_prj)

set(LUA_CMSGPACK_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lua-cmsgpack)
set(LUA_CMSGPACK_BUILD_DIR ${CMAKE_BINARY_DIR}/lua-cmsgpack)

#  CONFIGURE_COMMAND mkdir -p ${LUA_CMSGPACK_BUILD_DIR} && cd ${LUA_CMSGPACK_BUILD_DIR} && cmake -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DLUA_INCLUDE_DIR=${CMAKE_INSTALL_PREFIX}/include -DLUA_LIB_DIR=${CMAKE_INSTALL_PREFIX}/lib ${LUA_CMSGPACK_DIR}
#  CONFIGURE_COMMAND mkdir -p ${LUA_CMSGPACK_BUILD_DIR} && cd ${LUA_CMSGPACK_BUILD_DIR} && cmake -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DLUA_INCLUDE_DIR=/usr/include/lua5.3 -DLUA_LIB_DIR=${CMAKE_INSTALL_PREFIX}/lib ${LUA_CMSGPACK_DIR}

ExternalProject_Add(lua_cmsgpack_prj
  CONFIGURE_COMMAND mkdir -p ${LUA_CMSGPACK_BUILD_DIR} && cd ${LUA_CMSGPACK_BUILD_DIR} && cmake -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DLUA_INCLUDE_DIR=${CMAKE_INSTALL_PREFIX}/include -DLUA_LIB_DIR=${CMAKE_INSTALL_PREFIX}/lib ${LUA_CMSGPACK_DIR}
  BUILD_COMMAND cd ${LUA_CMSGPACK_BUILD_DIR} && make ${CMAKE_N_BUILDPROC} && make install
  INSTALL_COMMAND ""
  SOURCE_DIR ${LUA_CMSGPACK_DIR}
  BINARY_DIR ${LUA_CMSGPACK_DIR}
)

add_dependencies(lua_cmsgpack_prj lua_prj)

set(MSGPACK_DIR ${CMAKE_CURRENT_SOURCE_DIR}/msgpack-c-cpp-3.3.0)
set(MSGPACK_BUILD_DIR ${CMAKE_BINARY_DIR}/msgpack-c-cpp-3.3.0)

ExternalProject_Add(msgpack_prj
  CONFIGURE_COMMAND mkdir -p ${MSGPACK_BUILD_DIR} && cd ${MSGPACK_BUILD_DIR} && cmake -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DMSGPACK_ENABLE_SHARED=OFF ${MSGPACK_DIR}
  BUILD_COMMAND cd ${MSGPACK_BUILD_DIR} && make install
  INSTALL_COMMAND ""
  SOURCE_DIR ${MSGPACK_DIR}
  BINARY_DIR ${MSGPACK_DIR}
)

add_dependencies(msgpack_prj boost_prj)

set(SODIUM_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libsodium-1.0.18)
set(SODIUM_BUILD_DIR ${CMAKE_BINARY_DIR}/libsodium-1.0.18)

##    set(SODIUM_OPT --enable-opt --enable-shared=no --enable-static=yes)
#if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
#    set(SODIUM_OPT --enable-opt)
#    set(SODIUM_CFLAGS "-g0 -O3 -fPIC")
#else()
#    set(SODIUM_OPT "")
#    set(SODIUM_CFLAGS="-fPIC")
#endif()
#
#ExternalProject_Add(sodium_prj
#  CONFIGURE_COMMAND cp -R ${SODIUM_DIR} ${CMAKE_BINARY_DIR}
#  BUILD_COMMAND cd ${SODIUM_BUILD_DIR} && ./autogen.sh && ./configure --prefix=${CMAKE_INSTALL_PREFIX} ${SODIUM_OPT} CFLAGS=${SODIUM_CFLAGS} && make ${CMAKE_N_BUILDPROC} && make install
#  INSTALL_COMMAND  ""
#  SOURCE_DIR ${SODIUM_DIR}
#  BINARY_DIR ${SODIUM_DIR}
#)
#
#set(ZMQ_DIR ${CMAKE_CURRENT_SOURCE_DIR}/zeromq-4.3.4)
#set(ZMQ_BUILD_DIR ${CMAKE_BINARY_DIR}/zeromq-4.3.4)
#
#if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
#  set(ZMQ_STATIC ON)
#  set(ZMQ_SHARED ON)
#  set(ZMQ_CFLAGS "-g0 -O3 -fPIC")
#  set(ZMQ_CXXFLAGS "-g0 -O3 -fPIC")
#  set(LIBSODIUM_STATIC OFF)
#else()
#  set(ZMQ_STATIC ON)
#  set(ZMQ_SHARED ON)
#  set(ZMQ_CFLAGS "-g3 -O0 -fPIC")
#  set(ZMQ_CXXFLAGS "-g3 -O0 -fPIC")
#  set(LIBSODIUM_STATIC OFF)
#endif()
#
#ExternalProject_Add(zeromq_prj
#  CONFIGURE_COMMAND mkdir -p ${ZMQ_BUILD_DIR} && cd ${ZMQ_BUILD_DIR} && cmake -DZMQ_BUILD_TESTS=OFF -DWITH_LIBSODIUM=ON -DWITH_LIBSODIUM_STATIC=${LIBSODIUM_STATIC} -DENABLE_CURVE=ON -DBUILD_STATIC=${ZMQ_STATIC} -DBUILD_SHARED=${ZMQ_SHARED} -DCMAKE_C_FLAGS=${ZMQ_CFLAGS} -DCMAKE_CXX_FLAGS=${ZMQ_CXXFLAGS} -DCMAKE_PREFIX_PATH=${CMAKE_INSTALL_PREFIX}/lib/pkgconfig -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} ${ZMQ_DIR}
#  BUILD_COMMAND cd ${ZMQ_BUILD_DIR} && make ${CMAKE_N_BUILDPROC} install
#  INSTALL_COMMAND  ""
#  SOURCE_DIR ${ZMQ_DIR}
#  BINARY_DIR ${ZMQ_DIR}
#)
#
#add_dependencies(zeromq_prj sodium_prj)
#
#set(CPPZMQ_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cppzmq-4.7.1)
#set(CPPZMQ_BUILD_DIR ${CMAKE_BINARY_DIR}/cppzmq-4.7.1)
#
#if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
#    set(CPPZMQ_CXXFLAGS "-g0 -O3 -fPIC")
#else()
#    set(CPPZMQ_CXXFLAGS "-g3 -O0 -fPIC")
#endif()
#
#ExternalProject_Add(cppzmq_prj
#  CONFIGURE_COMMAND mkdir -p ${CPPZMQ_BUILD_DIR} && cd ${CPPZMQ_BUILD_DIR} && cmake -DCMAKE_CXX_FLAGS=${CPPZMQ_CXXFLAGS} -DCMAKE_PREFIX_PATH=${CMAKE_INSTALL_PREFIX}/lib/pkgconfig -DCPPZMQ_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} ${CPPZMQ_DIR}
#  BUILD_COMMAND cd ${CPPZMQ_BUILD_DIR} && make ${CMAKE_N_BUILDPROC} && make install
#  INSTALL_COMMAND ""
#  SOURCE_DIR ${CPPZMQ_DIR}
#  BINARY_DIR ${CPPZMQ_DIR}
#)
#
#add_dependencies(cppzmq_prj zeromq_prj)
#
#set(CZMQ_DIR ${CMAKE_SOURCE_DIR}/czmq-4.2.1)
#set(CZMQ_BUILD_DIR ${CMAKE_BINARY_DIR}/czmq-4.2.1)
#
#if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
#    set(CZMQ_FLAGS "-g0 -O3 -fPIC -I${CMAKE_INSTALL_PREFIX}/include")
#    set(CZMQ_STATIC ON)
#    set(CZMQ_SHARED ON)
#    #set(CZMQ_LDFLAGS "-lstdc++ -L${CMAKE_INSTALL_PREFIX}/lib -lzmq -lsodium")
#    set(CZMQ_LDFLAGS "")
#else()
#    set(CZMQ_FLAGS "-g3 -O0 -fPIC -I${CMAKE_INSTALL_PREFIX}/include")
#    set(CZMQ_STATIC ON)
#    set(CZMQ_SHARED ON)
#    set(CZMQ_LDFLAGS "")
#endif()
#
#ExternalProject_Add(czmq_prj
#  CONFIGURE_COMMAND mkdir -p ${CZMQ_BUILD_DIR} && cd ${CZMQ_BUILD_DIR} && cmake -DOPTIONAL_LIBRARIES_STATIC=${CZMQ_LDFLAGS} -DCZMQ_BUILD_STATIC=${CZMQ_STATIC} -DCZMQ_BUILD_SHARED=${CZMQ_SHARED} -DCMAKE_C_FLAGS=${CZMQ_FLAGS} -DCMAKE_CXX_FLAGS=${CZMQ_FLAGS} -DCMAKE_PREFIX_PATH=${CMAKE_INSTALL_PREFIX}/lib/pkgconfig -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} ${CZMQ_DIR}
#  BUILD_COMMAND cd ${CZMQ_BUILD_DIR} && make ${CMAKE_N_BUILDPROC} install
#  INSTALL_COMMAND  ""
#  SOURCE_DIR ${CZMQ_DIR}
#  BINARY_DIR ${CZMQ_DIR}
#)
#
#add_dependencies(czmq_prj zeromq_prj)
#
set(AZMQ_DIR ${CMAKE_SOURCE_DIR}/azmq-1.0.2)
set(AZMQ_BUILD_DIR ${CMAKE_BINARY_DIR}/azmq-1.0.2)

if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
    set(AZMQ_ZMQ_STATIC 0)
else()
    set(AZMQ_ZMQ_STATIC 0)
endif()

ExternalProject_Add(azmq_prj
  CONFIGURE_COMMAND mkdir -p ${AZMQ_BUILD_DIR} && cd ${AZMQ_BUILD_DIR} && cmake -DZMQ_STATIC=${AZMQ_ZMQ_STATIC} -DCMAKE_PREFIX_PATH=${CMAKE_INSTALL_PREFIX}/lib/pkgconfig -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} ${AZMQ_DIR}
  BUILD_COMMAND cd ${AZMQ_BUILD_DIR} && make ${CMAKE_N_BUILDPROC} install
  INSTALL_COMMAND  ""
  SOURCE_DIR ${AZMQ_DIR}
  BINARY_DIR ${AZMQ_DIR}
)

#add_dependencies(azmq_prj zeromq_prj boost_prj)
add_dependencies(azmq_prj boost_prj)

set(ZYRE_DIR ${CMAKE_SOURCE_DIR}/zyre-2.0.1)
set(ZYRE_BUILD_DIR ${CMAKE_BINARY_DIR}/zyre-2.0.1)

if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
    set(ZYRE_CFLAGS "-g0 -O2 -DZMQ_CURVE")
    #set(ZYRE_STATIC ON)
    #set(ZYRE_SHARED OFF)
    set(ZYRE_STATIC OFF)
    set(ZYRE_SHARED ON)
    set(ZYRE_LDFLAGS "")
    #set(ZYRE_LDFLAGS "-lstdc++ -lpthread -luuid -L${CMAKE_INSTALL_PREFIX}/lib -lzmq -lsodium")
else()
    set(ZYRE_CFLAGS "-g3 -O0 -DZMQ_CURVE")
    set(ZYRE_STATIC OFF)
    set(ZYRE_SHARED ON)
    set(ZYRE_LDFLAGS "")
endif()

ExternalProject_Add(zyre_prj
  CONFIGURE_COMMAND mkdir -p ${ZYRE_BUILD_DIR} && cd ${ZYRE_BUILD_DIR} && cmake -DENABLE_DRAFTS=ON -DZYRE_BUILD_STATIC=${ZYRE_STATIC} -DZYRE_BUILD_SHARED=${ZYRE_SHARED} -DOPTIONAL_LIBRARIES=${ZYRE_LDFLAGS} -DOPTIONAL_LIBRARIES_STATIC=${ZYRE_LDFLAGS} -DCMAKE_C_FLAGS=${ZYRE_CFLAGS} -DCMAKE_PREFIX_PATH=${CMAKE_INSTALL_PREFIX}/lib/pkgconfig -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} ${ZYRE_DIR}
  BUILD_COMMAND cd ${ZYRE_BUILD_DIR} && make ${CMAKE_N_BUILDPROC} install
  INSTALL_COMMAND  ""
  SOURCE_DIR ${ZYRE_DIR}
  BINARY_DIR ${ZYRE_DIR}
)

#add_dependencies(zyre_prj czmq_prj)
#
#set(EASYLOGGINPP_DIR ${CMAKE_CURRENT_SOURCE_DIR}/easyloggingpp-9.96.7)
#set(EASYLOGGINPP_BUILD_DIR ${CMAKE_BINARY_DIR}/easyloggingpp-9.96.7)
#
#if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
#    set(EASYLOGGINPP_STATIC ON)
#else()
#    set(EASYLOGGINPP_STATIC OFF)
#endif()
#
#ExternalProject_Add(easylogginpp_prj
#  CONFIGURE_COMMAND mkdir -p ${EASYLOGGINPP_BUILD_DIR} && cd ${EASYLOGGINPP_BUILD_DIR} && cmake -Dbuild_static_lib=${EASYLOGGINPP_STATIC} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} ${EASYLOGGINPP_DIR}
#  BUILD_COMMAND cd ${EASYLOGGINPP_BUILD_DIR} && make ${CMAKE_N_BUILDPROC} install
#  INSTALL_COMMAND ""
#  SOURCE_DIR ${EASYLOGGINPP_DIR}
#  BINARY_DIR ${EASYLOGGINPP_DIR}
#)
#
set(LEVELDB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/leveldb-1.23)
set(LEVELDB_BUILD_DIR ${CMAKE_BINARY_DIR}/leveldb-1.23)
#
if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
    set(LEVELDB_BUILD_SHARED_LIBS OFF)
else()
    set(LEVELDB_BUILD_SHARED_LIBS ON)
endif()


ExternalProject_Add(leveldb_prj
  CONFIGURE_COMMAND mkdir -p ${LEVELDB_BUILD_DIR} && cd ${LEVELDB_BUILD_DIR} && cmake -DCMAKE_CXX_FLAGS="-fPIC" -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DBUILD_SHARED_LIBS=${LEVELDB_BUILD_SHARED_LIBS} -DLEVELDB_INSTALL=ON ${LEVELDB_DIR}
  BUILD_COMMAND cd ${LEVELDB_BUILD_DIR} && make ${CMAKE_N_BUILDPROC} install
  INSTALL_COMMAND ""
  SOURCE_DIR ${LEVELDB_DIR}
  BINARY_DIR ${LEVELDB_DIR}
)

#if(${CMAKE_BUILD_TYPE} STREQUAL "Release")
#    set(VMIME_BUILD_STATIC_LIBRARY ON)
#    set(VMIME_BUILD_SHARED_LIBRARY OFF)
#else()
#    set(VMIME_BUILD_STATIC_LIBRARY ON)
#    set(VMIME_BUILD_SHARED_LIBRARY ON)
#endif()

#set(VMIME_DIR ${CMAKE_CURRENT_SOURCE_DIR}/vmime-0.9.2)
#set(VMIME_BUILD_DIR ${CMAKE_BINARY_DIR}/vmime-0.9.2)

#ExternalProject_Add(vmime_prj
#  CONFIGURE_COMMAND mkdir -p ${VMIME_BUILD_DIR} && cd ${VMIME_BUILD_DIR} && cmake -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} -DVMIME_HAVE_MESSAGING_PROTO_SENDMAIL=OFF -DVMIME_BUILD_STATIC_LIBRARY=${VMIME_BUILD_STATIC_LIBRARY} -DVMIME_BUILD_SHARED_LIBRARY=${VMIME_BUILD_SHARED_LIBRARY} -DVMIME_HAVE_SASL_SUPPORT=OFF -DVMIME_BUILD_SAMPLES=OFF -DVMIME_BUILD_DOCUMENTATION=OFF -DVMIME_HAVE_TLS_SUPPORT=OFF ${VMIME_DIR}
#  BUILD_COMMAND cd ${VMIME_BUILD_DIR} && make ${CMAKE_N_BUILDPROC} install
#  INSTALL_COMMAND ""
#  SOURCE_DIR ${VMIME_DIR}
#  BINARY_DIR ${VMIME_DIR}
#)
